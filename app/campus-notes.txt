//Font from Google.
import { Josefin_Sans } from "next/font/google"
const josefinSans = Josefin_Sans({ subsets: ["latin"] }) 
//Then interpolate in className as {josefinSans.className}

//CSS variables in tailwind. (Version 4.0 changes the notation.)
<div style={{'--primary-color': '#ff0000'}} className="bg-(--primary-color)" />
※The tokens setup in tailwind will no take effect on portals generated outside!


Handy task order for markup: HTML → tokenSetup → pseudoColors → layout and gaps → sizing&spacing → typography → shadows and effects.

//Note: label will allow click for the radio button. Better than a div.

//This inside the centralization of images inside the app router.
 export { default as imageAngela } from './images/image-angela.jpg';

export { default as ... } from '...'	
You want quick, minimal re-exports with no need to manipulate

import ..., export {...}	
You want more flexibility, possible grouping, processing, or clarity

import data from './data.json' with { type: "json" }

 {/* The following snippet will full bleed the image, regadless of the container constraints */}
      {/* .full-width {
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
} */}
----------------

hover: → when hovered

focus: → when focused
focus-visible: → when focus is keyboard-triggered
focus-within: → parent reacts when any child is focused

placeholder-shown: → input is empty and showing placeholder
not-placeholder-shown: → input has value

peer-*: → reacts based on sibling input state 

active: → while being clicked

disabled: → disabled state

aria-[invalid=true]: → when input has aria-invalid="true"


//gradient borders: 
Note that the 1.5 rem inside cal should be the half of the rounded corner.
 <div class="max-w-md rounded-3xl p-px bg-linear-to-b from-blue-300 to-pink-300 dark:from-blue-800 dark:to-purple-800 ">
      <div class="rounded-[calc(1.5rem-1px)] p-10 bg-white"></div></div>

//Tailwind theme setup: Colour Palette tokens prefixed with --color- (the tailwind utilities will then be all created.)
//Typography layers can be used with tailwind responsivenes!

@import "tailwindcss";
@theme inline {
  --font-***: var(--font-setup-in-next);
  --color-purple-300: #a775f1;
  --color-purple-500: #733fc8;
}

@layer utilities { 
  /*Instead of utilities, it might be better to use "components"*/
  /*WATCH OUT!!! If you add an unexistent class after @apply, all the work (tokens and utilities) will be trown away!*/
  .preset-1 {
    @apply text-[1.25rem] leading-[120%] tracking-normal font-semibold;
  }
}

Overflow hidden on a parent causes problems on sticky children!
